import uiautomation as auto
import xlrd
import time
import os
import xlsxwriter
import openpyxl
import json
import logging
from datetime import datetime

# 这个程序是一个微信自动发送消息的工具
# 主要功能包括:
# 1. 从Excel文件中读取联系人信息和要发送的消息内容
# 2. 自动控制微信PC客户端界面
# 3. 搜索指定联系人并打开聊天窗口
# 4. 自动发送预设的消息内容
# 5. 支持批量发送,可以给多个联系人发送消息
# 6. 支持添加称呼,可以为每个联系人定制化称呼
# 7. 异常处理,包括联系人搜索失败的重试机制

# 使用说明:
# 0. Excel文件名必须为"微信批量发送消息配置表.xlsx"，否则程序无法正常运行
# 1. 准备Excel文件,包含"联系人"和"发送内容"两个sheet
# 2. 在"联系人"sheet中填写联系人姓名和称呼
# 3. 在"发送内容"sheet的A1单元格填写要发送的消息内容
# 4. 运行程序时，选择是否要带称呼
# 5. 程序会自动读取Excel并控制微信发送消息
# 6. 发送过程中会在控制台显示进度和结果

# 注意事项:
# - 使用前请确保微信PC客户端已登录并正常运行
# - 联系人姓名必须与微信中的备注或昵称完全一致
# - 发送过程中请勿手动操作微信,以免影响自动化流程

# 配置日志
def setup_logging():
    log_dir = 'logs'
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    log_file = os.path.join(log_dir, f'wx_sndmsg_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    logging.basicConfig(filename=log_file, level=logging.INFO,
                        format='%(asctime)s - %(levelname)s - %(message)s')
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    logging.getLogger('').addHandler(console)

def load_config():
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"读取配置文件时出错: {e}")
        return None

def read_excel(file_path):
    try:
        workbook = xlrd.open_workbook(file_path)
        contacts_sheet = workbook.sheet_by_name("联系人")
        message_sheet = workbook.sheet_by_name("发送内容")
        
        contacts = []
        for row in range(1, contacts_sheet.nrows):
            name = contacts_sheet.cell_value(row, 0)
            title = contacts_sheet.cell_value(row, 1)
            contacts.append((name, title))
        
        message = message_sheet.cell_value(0, 0)
        
        return contacts, message
    except Exception as e:
        logging.error(f"读取Excel文件时出错: {e}")
        return None, None

def print_instructions():
    instructions = """
使用说明:
0. 确保config.json和Excel文件在程序同一目录下
1. 在config.json中设置Excel文件名和各项参数
2. 准备Excel文件,包含"联系人"和"发送内容"两个sheet
3. 在"联系人"sheet中填写联系人姓名和称呼
4. 在"发送内容"sheet的A1单元格填写要发送的消息内容
5. 运行程序时，选择是否要带称呼
6. 程序会自动读取Excel并控制微信发送消息
7. 发送过程中会在控制台显示进度和结果

注意事项:
- 使用前请确保微信PC客户端已登录并正常运行
- 联系人姓名必须与微信中的备注或昵称完全一致
- 发送过程中请勿手动操作微信,以免影响自动化流程
    """
    logging.info(instructions)

def print_config_description():
    config_description = """
    配置参数说明：

    excel_file_name: Excel文件的名称，包含联系人信息和消息内容。

    wait_time_between_messages: 两条消息发送之间的等待时间（秒）。
        - 增加此值可以降低被检测为垃圾消息的风险，但会降低发送效率。

    wait_time_after_search: 在搜索联系人后的等待时间（秒）。
        - 给微信一些时间来响应搜索操作。

    wait_time_after_enter: 在按下回车键进入聊天窗口后的等待时间（秒）。
        - 确保聊天窗口已经打开。

    wait_time_for_chat_window: 等待聊天窗口完全加载的时间（秒）。
        - 如果聊天记录较多，可能需要增加此值。

    max_search_attempts: 尝试查找联系人的最大次数。
        - 增加此值可以提高找到联系人的成功率，但可能会降低效率。

    wait_time_between_attempts: 两次查找尝试之间的等待时间（秒）。
        - 给微信一些时间来响应上一次的搜索操作。

    wait_time_after_paste: 在粘贴消息内容后的等待时间（秒）。
        - 确保消息内容被正确粘贴。

    wait_time_after_send: 在发送消息后的等待时间（秒）。
        - 给微信一些时间来发送消息。

    注意：这些参数的最佳值可能因设备性能和网络条件而异。请根据实际使用情况进行调整。
    """
    logging.info(config_description)
def send_message(window, name, title, message, use_title, config):
    try:
        # 将name转为字符串
        name = str(name)
        
        # 切换到聊天窗口
        window.ButtonControl(Name="聊天").Click()
        time.sleep(config['wait_time_after_search'])
        
        # 搜索联系人
        window.SendKeys('{Ctrl}f', waitTime=0.5)
        window.SendKeys('{Ctrl}a', waitTime=0.5)
        window.SendKey(auto.SpecialKeyNames['DELETE'], waitTime=0.5)
        auto.SetClipboardText(name)
        window.SendKeys('{Ctrl}v', waitTime=config['wait_time_after_paste'])
        window.SendKey(auto.SpecialKeyNames['ENTER'], waitTime=config['wait_time_after_enter'])
        
        time.sleep(config['wait_time_for_chat_window'])
        
        # 尝试多次查找编辑框
        for attempt in range(config['max_search_attempts']):
            edit = window.EditControl(Name=name)
            if edit.Exists():
                edit.SetFocus()
                full_message = f"{title}，{message}" if use_title and title else message
                auto.SetClipboardText(full_message)
                edit.SendKeys('{Ctrl}v', waitTime=config['wait_time_after_paste'])
                edit.SendKeys('{Enter}', waitTime=config['wait_time_after_send'])
                logging.info(f"已发送消息给 {name}")
                break
            else:
                if attempt < config['max_search_attempts'] - 1:
                    logging.warning(f"未找到与 {name} 的聊天窗口，正在重试...")
                    time.sleep(config['wait_time_between_attempts'])
                else:
                    logging.error(f"多次尝试后仍未找到与 {name} 的聊天窗口")
                    # 记录发送失败的联系人
                    record_failed_send(name, "未找到聊天窗口")
    except Exception as e:
        logging.error(f"发送消息给 {name} 时出错: {e}")
        # 调用record_failed_send方法记录发送失败的信息
        record_failed_send(name, str(e))

def record_failed_send(name, error):
    error_file = '发送失败名单.xlsx'
    try:
        if not os.path.exists(error_file):
            workbook = xlsxwriter.Workbook(error_file)
            worksheet = workbook.add_worksheet()
            worksheet.write(0, 0, '姓名')
            worksheet.write(0, 1, '错误信息')
            workbook.close()
        
        workbook = openpyxl.load_workbook(error_file)
        sheet = workbook.active
        next_row = sheet.max_row + 1
        sheet.cell(row=next_row, column=1, value=name)
        sheet.cell(row=next_row, column=2, value=str(error))
        workbook.save(error_file)
        logging.info(f"已将发送失败的联系人 {name} 记录到 {error_file}")
    except Exception as excel_error:
        logging.error(f"记录发送失败信息时出错: {excel_error}")

def main():
    setup_logging()
    logging.info("程序开始运行")
    print_instructions()
    print_config_description()
    
    config = load_config()
    if config is None:
        return
    
    curr_dir = os.getcwd()
    file_path = os.path.join(curr_dir, config['excel_file_name'])
    
    if not os.path.exists(file_path):
        logging.error(f"错误：在 {curr_dir} 目录下未找到 '{config['excel_file_name']}' 文件")
        return
    
    contacts, message = read_excel(file_path)
    if contacts is None or message is None:
        return
    
    use_title = input("是否要带称呼？(y/n): ").lower() == 'y'
    logging.info(f"用户选择{'带' if use_title else '不带'}称呼")
    
    try:
        wx_window = auto.WindowControl(ClassName="WeChatMainWndForPC")
        wx_window.SetActive()
        
        for name, title in contacts:
            send_message(wx_window, name, title, message, use_title, config)
            time.sleep(config['wait_time_between_messages'])
        
        logging.info("所有消息发送完毕")
    except Exception as e:
        logging.error(f"运行过程中出错: {e}")

if __name__ == "__main__":
    main()
